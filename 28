## O(mÂ·n)

def strStr(self, haystack, needle):
    m, n = len(haystack), len(needle)

    # Edge case: empty needle should return 0
    if n == 0:
        return 0

    # Traverse through haystack
    for i in range(m - n + 1):  # only up to where needle can fit
        if haystack[i] == needle[0]:  # first char matches
            if haystack[i : i + n] == needle:  # check substring
                return i  # found match
    
    return -1

## KMP O(m + n)

def strStr(self, haystack, needle):
    # Edge case: empty needle should return 0
    if needle == "":
        return 0

    lps = [0]*len(needle)
    prevlps, i = 0,1

    while i < len(needle): 
        if needle[i] == needle[prevlps]:
            lps[i] = prevlps +1
            i+= 1
            prevlps += 1
        elif prevlps == 0: 
            lps[i] = 0
            i+=1
        else: 
            prevlps = lps[prevlps -1]
    

    # Traverse through haystack
    m, n = 0,0 # pointer to haystack and needle
    while m < len(haystack): 
        if haystack[m] == needle[n]: 
            m +=1
            n +=1
        else: 
            if n == 0: 
                m =m+1
            else: 
                n = lps[n-1]
        if n == len(needle):
            return m - len(needle)
    return -1
        

